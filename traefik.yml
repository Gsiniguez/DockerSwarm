version: "3.3"

services:

  traefik:
    image: "traefik:v2.3"
    networks:
     - traefik-net
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.swarmmode"
      - "--providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-net`)"
      #Entries ports
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - "--certificatesresolvers.le.acme.email=test@test.com"
      # Store the Let's Encrypt certificates in the mounted volume
      - "--certificatesresolvers.le.acme.storage=/certificates/acme.json"
      # Use the TLS Challenge for Let's Encrypt
      - "--certificatesresolvers.le.acme.tlschallenge=true"
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-net
        # Use the custom label "traefik.constraint-label=traefik-net"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-net

        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        #- traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-net-http.rule=Host(`test.com`)
        - traefik.http.routers.traefik-net-http.entrypoints=http
        - traefik.http.routers.traefik-net-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-net-https.rule=Host(`test.com`)
        - traefik.http.routers.traefik-net-https.entrypoints=https
        - traefik.http.routers.traefik-net-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-net-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-net-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        #- traefik.http.routers.traefik-net-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-net.loadbalancer.server.port=8080

volumes:
  traefik-net-certificates:

networks:
  traefik-net:
    external: true